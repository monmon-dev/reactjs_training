install: npm, yarn
url: https://indecision.mead.io/; https://github.com/andrewjmead/react-course-2-indecision-app
install: 
npm install -g live-server 
npm install -g babel-cli@6.24.1
yarn add babel-preset-react@6.24.1 babel-preset-env@1.5.2

run: 
babel src/app.js --out-file=public/scripts/app.js --presets=env,react
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch

!notes in running if re-open:
first terminal: live-server public
second terminal: babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch
chill song: https://www.youtube.com/watch?v=FnLBnShJpUY
          : https://www.youtube.com/watch?v=Y423D-GpX2I
          
babel src/playground/es6-let-const.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/es6-arrow-function.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/es6-arrow-function-2.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/build-it-visible.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/es6-classes-1.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/jsx-indecision.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/playground/counter-example.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch
babel src/app.js --out-file=public/scripts/app.js --presets=env,react --watch


React components (Indecision App)
<IndecisionApp />   ...this is going to be the Parent components
    <Header />          ...this is going to be the Child components
    <Actiom />          ...this is going to be the Child components
    <Options />         ...this is going to be the Child components
        <Option />          ...this is going to be the Child of <Options /> components
    <AddOption />       ...this is going to be the Child components

Constructor function is the function that gets called 
when we make a new instance and it gets called 
with all of the arguments we pass in.

we never want to manipulate the state or the previous state, instead we want to go ahead and
just compute the new one. so, instead of using push, we're going to use the array concat method
the array concat method is going to allow us to merge the values from this array with something
new without affecting this array. so, it's not going to change that stuff

Array.prototype.concat()
The concat() method is used to merge two or more arrays
This method does not change the existing arrays, but instead returns a new array
Example:
var arr1 = ['a', 'b', 'c']
var arr2 = ['d','e','f',]
var arr3 = arr1.concat(arr2); //['a','b','c','d','e','f']

if (this.state.options.indexOf(option) > -1) //this code means it has a matched/same data

Array.prototype.filter()
The filter() method creates a new array with all elements that pass the test
implemented by the provided function
Example:
var words = ["spray", "limit", "elite", "exuberant", "destruction", "present"]

var longWords = words.filter(function(word){
    return word.length > 6;
})
//Filtered array longWords is ["exuberant", "destruction", "present"]

componentDidMount() {
    console.log("fetching data");
}

componentDidUpdate(prevProps, prevState) {
    console.log("saving data");
}

componentWillUnmount() {
    console.log("componentWillUnMount");
}

The componentDidMount() method allows us to execute the React code when the component 
  is already placed in the DOM (Document Object Model). This method is called during 
  the Mounting phase of the React Life-cycle i.e after the component is rendered.
  All the AJAX requests and the DOM or state updation should be coded in the 
  componentDidMount() method block. We can also set up all the major subscriptions 
  here but to avoid any performance issues, always remember to unsubscribe them in the 
  componentWillUnmount() method.
Syntax: componentDidMount()

The componentDidUpdate() method allows us to execute the React code when the 
  component is updated. All the network requests that are to be made when the 
  props passed to the component changes are coded here.
  The componentDidUpdate()is called after componentDidMount() and can be useful 
  to perform some action when the state of the component changes.
Syntax: componentDidUpdate(prevProps, prevState, snapshot)

The componentWillUnmount() method allows us to execute the React code when the 
  component gets destroyed or unmounted from the DOM (Document Object Model). 
  This method is called during the Unmounting phase of the React Life-cycle i.e 
  before the component gets unmounted.
  All the cleanups such as invalidating timers, canceling network requests, 
  or cleaning up any subscriptions that were created in componentDidMount() 
  should be coded in the componentWillUnmount() method block.
  Tip: Never call setState() in componentWillUnmount() method.
Syntax: componentWillUnmount()

Webpack - is an asset bundler, it's going to combine all of the assets that make up our
application with all of the assets needed from 3rd party libraries.
Using webpack we're going to be able to take our own application code and break it up 
across multiple files where each component lives in its own file

Webpack - allow us to organise our JavaScript

Uninstall the Babel and Live-server
npm uninstall -g babel-cli live-server
npm install live-server babel-cli@6.24.1
npm run serve
npm run build


npm install webpack@3.1.0
npm run serve
npm run build-babel

to make npm run build works, install the following globally
npm install -g webpack
npm install -g webpack-cli
if error still occurs, follow the advised on git command


npm run serve
npm run build
npm run build-babel (no need to run it)




